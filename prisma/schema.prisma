// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Doctor {
  id           Int              @id @default(autoincrement())
  name         String
  email        String          @unique
  license      String          @unique
  phone        String
  specialty    String
  password     String
  appointments Appointment[]
  schedules    DoctorSchedule[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User?           @relation(fields: [userId], references: [id])
  userId       String          @unique
}

model DoctorSchedule {
  id        Int      @id @default(autoincrement())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // Format: "HH:mm"
  endTime   String   // Format: "HH:mm"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, dayOfWeek]) // One schedule per day per doctor
}

model Patient {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  license        String        @unique
  dateOfBirth    DateTime
  phone          String
  address        String
  bloodType      String
  allergies      String
  medicalHistory String
  appointments   Appointment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum AppointmentType {
  GENERAL
  SPECIALIST
  EMERGENCY
  FOLLOW_UP
  OTHER
}

model Appointment {
  id          Int               @id @default(autoincrement())
  patient     Patient           @relation(fields: [patientId], references: [id])
  patientId   Int
  doctor      Doctor            @relation(fields: [doctorId], references: [id])
  doctorId    Int
  type        AppointmentType   @default(GENERAL)
  description String
  date        DateTime
  notes       String
  status      AppointmentStatus @default(SCHEDULED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  Doctor        Doctor?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
